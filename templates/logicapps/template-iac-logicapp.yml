# IaC Logic App resources deployment template

parameters:
- name: environment
  type: string
- name: environmentId
  type: string
- name: serviceConnection
  type: string
- name: variableGroups
  type: object

jobs:
- deployment: deploy_logicapp_resources
  displayName: Deploy Logic App Resources
  pool:
    vmImage: 'windows-latest'
  environment: ${{ parameters.environment }}
  variables: 
  - '${{ each variableGroup in parameters.variableGroups }}':
    - group: '${{variableGroup}}'
  - name: applicationResourceGroupName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-${{parameters.applicationName}}' 
  - name: StorageAccountName
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}${{parameters.applicationName}}'
  - name: idamsdsifileshare
    value: '$(platformGlobalIdentifier)${{parameters.environmentId}}-${{parameters.applicationName}}'
  
  strategy:
    runOnce:
      deploy:
        steps:
        - download: current
          artifact: $(artifactName)

        - task: AzureResourceGroupDeployment@2
          displayName: 'Deploy Logic App'
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            resourceGroupName: '$(applicationResourceGroupName)'
            
            location: 'westeurope'
            csmFile: '$(Pipeline.Workspace)/$(artifactName)/classic/logicapp-template.json'
            overrideParameters: '
              -logicAppLocation $(logicapplocation)
              -environmentName ${{ parameters.environment }}
              -projectName $(projectName)
              -logicAppName $(logicappname)
              -appServicePlanName "idamsdsiapp-asp"
              -storageName $(StorageAccountName)
              
            deploymentMode: $(deploymentMode)
            deploymentOutputs: 'LogicAppArmOutputs'

        - task: ARM Outputs@6
          displayName: 'ARM Outputs'
          inputs:
            ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
            ConnectedServiceNameARM: ${{ parameters.serviceConnection }}
            resourceGroupName: '$(applicationResourceGroupName)'
            whenLastDeploymentIsFailed: 'fail'

               
        - task: AzurePowerShell@5
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }} 
            ErrorActionPreference: 'Stop'
            FailOnStandardError: true
            ScriptType: 'inlineScript'
            inline: |
              $accountKey = (Get-AzStorageAccountKey -ResourceGroupName '$(applicationResourceGroupName)' -Name $(StorageAccountName))[0].Value
              $ctx = New-AzStorageContext -StorageAccountName $(StorageAccountName) -StorageAccountKey $accountKey
              $s = Get-AzStorageShare $(idamsdsifileshare) -Context $ctx
              Write-Host -ForegroundColor Green "Creating directory in file share.."    
              Get-AzStorageShare -Context $ctx -Name $(idamsdsifileshare) | New-AzStorageDirectory -Path "/site/wwwroot/$(logicappname)"  
              Set-Location "$(Pipeline.Workspace)/$(artifactName)/"
              $CurrentFolder = (Get-Item .).FullName
              $files = Get-ChildItem -Recurse | Where-Object { $_.GetType().Name -eq "FileInfo"}
              foreach ($file in $files) {
              $path=$file.FullName.Substring($Currentfolder.Length+1).Replace("\","/")
              $path = "scripts/"+$path 
              
              try {
                if ($file.FullName.Contains("workflow")) {
                  Write-output "Writing: $($file.FullName)" 
                Set-AzStorageFileContent -Share $s.CloudFileShare -Source $file.FullName -Path "/site/wwwroot/$(logicappname)" -Force
                }
                if ($file.FullName.Contains("connections")) 
                {
                  Write-output "Writing: $($file.FullName)" 
                Set-AzStorageFileContent -Share $s.CloudFileShare -Source $file.FullName -Path "/site/wwwroot/" -Force
                }

              }
              catch {
                $message = $_
                Write-Warning "That didn't work: $message"
              }}
            
            azurePowerShellVersion: 'LatestVersion'
            displayName: "Azure Files Storage Copy"
        
                  

        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az functionapp config appsettings set --name $(LAname) --resource-group  "s141d02-idamsdsiapp" --settings "BLOB_CONNECTION_RUNTIMEURL=$(idamsblobstorageconnectionstring)"
              az functionapp config appsettings set --name $(LAname) --resource-group  "s141d02-idamsdsiapp" --settings "WORKFLOWS_RESOURCE_GROUP_NAME=s141d02-idamsdsiapp"
            addSpnToEnvironment: true
            useGlobalConfig: true