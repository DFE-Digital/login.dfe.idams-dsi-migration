parameters:
    - name: serviceConnection
      type: string
    - name: subscriptionId
      type: string
    - name: applicationName
      type: string
    - name: deploymentLocation
      type: string
      default: westeurope
    - name: pireanstorageaccountname
      type: string
    - name: projectId
      type: string
      default: s141
    - name: environmentId
      type: string
    - name: environmentName
      type: string
    - name: servicePlanSkuName
      type: string
      default: Y1
    - name: sevicePlanSkuTier
      type: string
      default: Dynamic
    - name: topicName
      type: string
      default: audit
    - name: platformVariableGroupName
      type: string
    - name: shdResourceGroup
      type: string
    - name: platformIdamsVariableGroupName
      type: string
    - name: platformdsikvVariableGroupName
      type: string
jobs:
- deployment: 'deploy_${{parameters.environmentName}}'
  displayName: 'Deploy [${{parameters.environmentName}}]'
  environment: '${{parameters.environmentName}}'
  pool:
    vmImage: ubuntu-latest
  variables:
  - group: '${{parameters.platformVariableGroupName}}'
  - group: '${{parameters.platformIdamsVariableGroupName}}'
  - group: '${{parameters.platformdsikvVariableGroupName}}'
  - name: keyVaultName 
    value: ${{parameters.projectId}}${{parameters.environmentId}}-signin-kv
  - name: resourceGroupNameShd
    value: "${{parameters.projectId}}${{parameters.environmentId}}-shd"
  
  - name: resourceGroupName
    value: '${{parameters.projectId}}${{parameters.environmentId}}-dataimport'
 
  strategy:
    runOnce:
      deploy:
        steps:
       
        - task: AzureCLI@2
          displayName: White-list pipeline IP for keyVault & SCM
          inputs:
            azureSubscription: ${{parameters.serviceConnection}}
            ScriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $IpAddress = Invoke-RestMethod -uri https://api.ipify.org
              $keyVault = "$(keyVaultName)"
              az keyvault network-rule add --name $keyVault --resource-group $(resourceGroupNameShd) --ip-address $IpAddress
        - task: AzureKeyVault@2
          displayName: Load environment [${{ parameters.environmentName }}] secrets
          inputs:
            azureSubscription: '${{parameters.serviceConnection}}'
            KeyVaultName: '$(keyVaultName)'
            SecretsFilter: '*'
            RunAsPreJob: false
        - task: PowerShell@2
          inputs:
            targetType: inline
            script: Invoke-RestMethod -Uri ('http://ipinfo.io/'+(Invoke-WebRequest -uri "http://ifconfig.me/ip").Content)
                   
        
        - pwsh: |
                    Write-Host "functionName is: $env:ARMOUTPUTS_ARMOUTPUT_FUNCTIONNAME"
                    Write-Host "##vso[task.setvariable variable=functionName]$env:ARMOUTPUTS_ARMOUTPUT_FUNCTIONNAME"
        - task: AzurePowerShell@5
          displayName: Create Subnets
          inputs:
            azureSubscription: ${{parameters.serviceConnection}}
            ScriptType: 'FilePath'
            ScriptPath: ./powershell/Add-Subnet-to-Existing-Vnet.ps1
            ScriptArguments: '-vNetName $(vnetname) -resourceGroupName $(vnetresourcegroupname) -AddressPrefixStorage $(vnetsubnetaddressprefixst) -AddressPrefixFunction $(vnetsubnetaddressprefixfa) -subnetNameStorage $(vnetsubnetnamest) -subnetNameFunction $(vnetsubnetnamefa)'
            azurePowerShellVersion: 'LatestVersion'
            pwsh: true

        - template: /Infrastructure/steps/deployment-template.yml@devopsTemplates
          parameters:
            serviceConnection: '${{parameters.serviceConnection}}'
            subscriptionId: '${{parameters.subscriptionId}}'
            resourceGroupName: '$(resourceGroupName)'
            location: '${{parameters.deploymentLocation}}'
            tags: $(Tags)
            shdResourceGroup: '${{parameters.shdResourceGroup}}'
            templateFilePath: $(Build.SourcesDirectory)/templates/functionapps/arm/idams-function-template.json
            storageAccountTemplateFilePath: $(Build.SourcesDirectory)/templates/functionapps/arm/storage-account-template.json 
            armParameterOverrideString: '-templatesBaseUri "$(templatesBaseUri)" -applicationName "${{parameters.applicationName}}" -environmentName "${{parameters.environmentName}}" -dirDBName "$(platformGlobalDirectoriesDatabaseName)" -dirDBHostName "$(platformGlobalServerName)" -dirDBUsername "$(sqlAdministratorLogin)" -dirDBPassword "$(sqlAdministratorLoginPassword)" -orgDBName "$(platformGlobalOrganisationDatabaseName)" -orgDBHostName "$(platformGlobalServerName)" -orgDBUsername "$(sqlAdministratorLogin)" -orgDBPassword "$(sqlAdministratorLoginPassword)" -idamsblobstorageconnectionstring "$(idamsblobstorageconnectionstring)" -environmentId "${{parameters.environmentId}}" -AppServicePlanSku "$(FunctionAppServicePlanSku)" -sharedResourceGroupName "${{parameters.shdResourceGroup}}" -ppapiendpointurl "$(ppapiendpointurl)" -ppapifunctionkey "$(ppapifunctionkey)" -appInsightsInstrumentationKey "$(appInsightsInstrumentationKeyPirean)" '
            storageAccountParameterOverideString: '-applicationName "${{parameters.applicationName}}" -environmentId "${{parameters.environmentId}}"'
            processOutputs: true
              
        - task: AzureCLI@2
          displayName: 'Azure CLI - Promote Service Principal'
          inputs:
            azureSubscription: '${{parameters.serviceConnection}}'
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
                  
                    Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
                    Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
                    Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"
            addSpnToEnvironment: true
         
        - task: AzurePowerShell@5
          displayName: Connect with Az
          inputs:
            azureSubscription: '${{parameters.serviceConnection}}'
            ScriptType: InlineScript
            Inline: |
                 
                   $username = "$(ARM_CLIENT_ID)"
                   $password = "$(ARM_CLIENT_SECRET)"
                   $tenantId = "$(ARM_TENANT_ID)"
                   az login --service-principal --username  $username --password $password --tenant $tenantId

            azurePowerShellVersion: 'LatestVersion'  
        - task: AzurePowerShell@5
          displayName: Configure VNET Firewall rules
          inputs:
            azureSubscription: ${{parameters.serviceConnection}}
            ScriptType: 'FilePath'
            ScriptPath: ./powershell/Configure-VNET-Firewall-Rules-Multi-Subnets.ps1
            ScriptArguments: '-subscriptionId ${{parameters.subscriptionId}} -vNetName $(vnetname) -resourceGroupName $(vnetresourcegroupname) -functionAppRG $(resourceGroupName) -AddressPrefix $(vnetsubnetaddressprefixst) -subnetName $(vnetsubnetnamest) -storageaccountName $(storageaccountimport) -storageaccountRGName $(resourceGroupName) -functionAppName $(functionAppImport) -subnetNamefa $(vnetsubnetnamefa)'
            azurePowerShellVersion: 'LatestVersion'
            pwsh: true

       
        - task: ExtractFiles@1
          displayName: Extract Build Artifact
          inputs:
            archiveFilePatterns: ../**/$(Build.BuildId).zip
            destinationFolder: artifactoutput
            cleanDestinationFolder: true

        - pwsh: |
            Write-Host "functionName is: $env:ARMOUTPUTS_ARMOUTPUT_FUNCTIONNAME"
            Write-Host "##vso[task.setvariable variable=functionName]$env:ARMOUTPUTS_ARMOUTPUT_FUNCTIONNAME"
        
        - task: replacetokens@3
          displayName: Tokenise Function.json
          inputs:
            targetFiles: '**/artifactoutput/**/function.json'
            encoding: auto
            writeBOM: true
            escapeType: json
            verbosity: detailed
            actionOnMissing: fail
            keepToken: false
            tokenPrefix: __
            tokenSuffix: __
            useLegacyPattern: false
            enableTelemetry: false

        - pwsh: |
            Get-ChildItem -Path $(Pipeline.Workspace) â€“Recurse
          displayName: Tidy up package in Pipeline workspace

        - task: ArchiveFiles@2
          displayName: Create package for Azure Function
          inputs:
            rootFolderOrFile: $(Pipeline.Workspace)/s/artifactoutput
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Pipeline.Workspace)/s/Function_$(Build.BuildId).zip
            replaceExistingArchive: true
            verbose: true

        - task: AzureFunctionApp@1
          displayName: Deploy Azure Function App
          inputs:
            azureSubscription: '${{parameters.serviceConnection}}'
            appType: functionApp
            deploymentMethod: zipDeploy
            appName: $(functionName)
            package: $(Pipeline.Workspace)/s/Function_$(Build.BuildId).zip

        - task: AzureCLI@2
          displayName: Remove pipeline IP from keyvault
          condition: always()
          inputs:
            azureSubscription: ${{parameters.serviceConnection}}
            ScriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $IpAddress = Invoke-RestMethod -uri https://api.ipify.org
              $keyVault = "$(keyVaultName)"
              az keyvault network-rule remove --name $keyVault --resource-group $(resourceGroupNameShd) --ip-address $IpAddress

       